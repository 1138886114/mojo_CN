import{_ as s,c as n,o as a,O as l}from"./chunks/framework.0d343703.js";const i=JSON.parse('{"title":"进阶操作","description":"","frontmatter":{},"headers":[],"relativePath":"docs/pro.md"}'),p={name:"docs/pro.md"},o=l(`<h1 id="进阶操作" tabindex="-1">进阶操作 <a class="header-anchor" href="#进阶操作" aria-label="Permalink to &quot;进阶操作&quot;">​</a></h1><h2 id="参数化-编译时元编程" tabindex="-1">参数化：编译时元编程 <a class="header-anchor" href="#参数化-编译时元编程" aria-label="Permalink to &quot;参数化：编译时元编程&quot;">​</a></h2><p>Mojo 支持编译器中内置的完整编译时元编程功能，作为一个单独的编译阶段——在解析、语义分析和 IR 生成之后，但在降低为特定目标代码之前。 它对运行时程序使用与元程序相同的宿主语言，并利用 MLIR 以可预测的方式表示和评估这些程序。</p><p>让我们看一些简单的例子。</p><h3 id="定义参数化类型和函数" tabindex="-1">定义参数化类型和函数 <a class="header-anchor" href="#定义参数化类型和函数" aria-label="Permalink to &quot;定义参数化类型和函数&quot;">​</a></h3><p>Mojo 结构和函数都可以参数化，但是一个例子可以帮助激发我们关心的原因。 让我们看一下“SIMD”类型，它代表硬件中的低级向量寄存器，其中包含标量数据类型的多个实例。 如今的硬件加速器正在获得奇异的数据类型，并且使用具有 512 位或更长 SIMD 向量的 CPU 并不少见。 硬件有很多多样性（包括许多品牌，如 SSE、AVX-512、NEON、SVE、RVV 等），但许多操作是常见的，并被数字和 ML 内核开发人员使用——这种类型将它们暴露给 Mojo 程序员。</p><p>这是来自 Mojo 标准库的 SIMD API 的非常简化和简化的版本。 我们使用 HeapArray 来存储此示例的 SIMD 数据，并使用循环在我们的类型上实现基本操作 - 我们这样做只是为了为了演示而模仿所需的 SIMD 类型行为。 真正的 Stdlib 实现由真正的 SIMD 指令支持，这些指令可通过 Mojo 直接使用 MLIR 的能力访问（请参阅高级 Mojo 功能部分中有关该主题的更多信息）。</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> List </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> VariadicList</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">struct MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    var value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> HeapArray</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Create a new SIMD from a number of scalars</span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">inout </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#89DDFF;">*</span><span style="color:#82AAFF;">elems</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">HeapArray</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        let elems_list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VariadicList</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">elems</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">elems_list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">__len__</span><span style="color:#89DDFF;">()):</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> elems_list</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__copyinit__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">inout </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> other</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">]):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> other</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__getitem__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> -&gt; Int</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__setitem__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">store</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> val</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Fill a SIMD with a duplicated scalar value.</span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">splat</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> -&gt; Self</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Many standard operators are supported.</span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__add__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> rhs</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> -&gt; MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">        let result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> rhs</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__sub__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> rhs</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Self</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> -&gt; Self</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        let result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> rhs</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn concat</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">rhs_size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">](</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> rhs</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">rhs_size</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> -&gt; MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> rhs_size</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">        let result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> rhs_size</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">rhs_size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rhs</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>Mojo 中的参数使用 PEP695 语法的扩展版本在方括号中声明。 它们的名称和类型类似于 Mojo 程序中的普通值，但它们是在编译时而非运行时由目标程序求值的。 运行时程序可以使用参数值——因为参数在编译时在运行时程序需要它们之前被解析——但编译时参数表达式可能不使用运行时值。</p><p>在上面的示例中，有两个声明的参数：<code>MySIMD</code> 结构由 size 参数参数化，<code>concat</code> 方法进一步由 <code>rhs_size</code> 参数参数化。 因为 MySIMD 是参数化类型，所以 <code>self</code> 参数的类型携带参数——完整的类型名称是 <code>MySIMD[size]</code>。 虽然写出来总是有效的（如 <code>_add__</code> 的返回类型所示），但这可能很冗长：我们建议像 <code>__sub__</code> 示例一样使用 <code>Self</code> 类型（来自 PEP673）。</p><p>Mojo Stdlib 提供的实际 <code>SIMD</code> 类型也在元素的数据类型上进行了参数化。</p><h3 id="使用参数化类型和函数" tabindex="-1">使用参数化类型和函数 <a class="header-anchor" href="#使用参数化类型和函数" aria-label="Permalink to &quot;使用参数化类型和函数&quot;">​</a></h3><p>大小指定 <code>SIMD</code> 向量中元素的数量，下面的示例显示了我们的类型如何使用：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Make a vector of 4 elements.</span></span>
<span class="line"><span style="color:#A6ACCD;">let a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">](</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Make a vector of 4 elements and splat a scalar value into it.</span></span>
<span class="line"><span style="color:#A6ACCD;">let b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">]().</span><span style="color:#82AAFF;">splat</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Add them together and print the result</span></span>
<span class="line"><span style="color:#A6ACCD;">let c </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b</span></span>
<span class="line"><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Make a vector of 2 elements.</span></span>
<span class="line"><span style="color:#A6ACCD;">let d </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">](</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Make a vector of 2 elements.</span></span>
<span class="line"><span style="color:#A6ACCD;">let e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">](</span><span style="color:#F78C6C;">70</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">let f </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> d</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">concat</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">e</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Uncomment to see the error:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># let x = a + e # ERROR: Operation MySIMD[4]+MySIMD[2] is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">let y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> f </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>请注意，<code>concat</code> 方法需要一个附加参数来指示第二个 <code>SIMD</code> 向量的大小：这是通过参数化对 <code>concat</code> 的调用来处理的。 我们的玩具 SIMD 类型显示了具体类型 (<code>Int</code>) 的使用，但参数的主要功能来自于定义参数算法和类型的能力，例如 定义参数算法非常容易，例如 与长度和 DType 无关的：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> DType </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> DType</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> Math </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> sqrt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fn rsqrt</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dt</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> DType</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> SIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">dt</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> width</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> -&gt; SIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">dt</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> width</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">)</span></span></code></pre></div><p>Mojo 编译器在使用参数进行类型推断方面相当聪明。 请注意，此函数能够在不指定参数的情况下调用参数化 <code>sqrt(x)</code> 函数，编译器会推断其参数，就像您显式编写 <code>sqrt[width,type](x)</code> 一样。 另请注意，<code>rsqrt</code> 选择定义其第一个名为 <code>width</code> 的参数，但 <code>SIMD</code> 类型毫无疑问地将其命名为 <code>size</code>。</p><h3 id="参数表达式只是-mojo-代码" tabindex="-1">参数表达式只是 Mojo 代码 <a class="header-anchor" href="#参数表达式只是-mojo-代码" aria-label="Permalink to &quot;参数表达式只是 Mojo 代码&quot;">​</a></h3><p>所有参数和参数表达式都使用与运行时程序相同的类型系统进行类型化：Int 和 DType 在 Mojo 标准库中作为结构实现。<br> 参数非常强大，支持在编译时使用带有运算符的表达式、函数调用等，就像运行时程序一样。<br> 这允许使用许多“依赖类型”功能，例如，您可能想要定义一个辅助函数来连接两个 SIMD 向量，就像我们在上面的示例中所做的那样：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fn concat</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">len1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> len2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">lhs</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">len1</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> rhs</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">len2</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> -&gt; MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">len1</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">len2</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    let result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">len1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> len2</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len1</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> lhs</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> j </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">len2</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">len1 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> j</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rhs</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">let a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">](</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">let x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> concat</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">a</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> a</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">()</span></span></code></pre></div><p>请注意结果长度如何等于输入向量长度的总和，您可以使用简单的 + 运算来表示。<br> 举一个更复杂的例子，看看标准库中的 <code>SIMD.shuffle</code> 方法：它接受两个输入 <code>SIMD</code> 值，一个向量洗牌掩码作为列表，并返回一个与洗牌掩码长度匹配的 <code>SIMD</code>。</p><h3 id="强大的编译时编程" tabindex="-1">强大的编译时编程 <a class="header-anchor" href="#强大的编译时编程" aria-label="Permalink to &quot;强大的编译时编程&quot;">​</a></h3><p>虽然简单的表达式很有用，但有时您希望编写具有控制流的命令式编译时逻辑。 例如，<code>Math</code> 模块中的 <code>isclose</code> 函数对整数使用精确相等，但对浮点数使用接近比较。 您甚至可以进行编译时递归，例如 这是一个示例“树减少”算法，它将向量的所有元素递归地求和为一个标量：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">fn slice</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">new_size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> offset</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> -&gt; MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">new_size</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    let result </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">new_size</span><span style="color:#89DDFF;">]()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">new_size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        result</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> offset</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fn reduce_add</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> -&gt; Int</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">parameter</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> size </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">elif</span><span style="color:#A6ACCD;"> size </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;"># Extract the top/bottom halves, add them, sum the elements.</span></span>
<span class="line"><span style="color:#A6ACCD;">    alias half_size </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> size </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">    let lhs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> slice</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">half_size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    let rhs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> slice</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">half_size</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> size</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> half_size</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> reduce_add</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">half_size</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">lhs </span><span style="color:#89DDFF;">+</span><span style="color:#82AAFF;"> rhs</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">let x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MySIMD</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">](</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dump</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Elements sum:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> reduce_add</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">](</span><span style="color:#82AAFF;">x</span><span style="color:#89DDFF;">))</span></span></code></pre></div><p>这利用了 <code>@parameter if</code> 特性，这是一个在编译时运行的 if 语句。 它要求其条件是一个有效的参数表达式，并确保只有 if 的活分支被编译到程序中。</p><h3 id="mojo-类型只是参数表达式" tabindex="-1">Mojo 类型只是参数表达式 <a class="header-anchor" href="#mojo-类型只是参数表达式" aria-label="Permalink to &quot;Mojo 类型只是参数表达式&quot;">​</a></h3><p>虽然我们已经展示了如何在类型中使用参数表达式，但在 Python 和 Mojo 中，类型注释本身可以是任意表达式。<br> Mojo 中的类型有一个特殊的元类型类型，允许定义类型参数算法和函数，例如我们可以扩展我们的 HeapArray 结构以支持任意类型的元素：</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">struct Array</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> AnyType</span><span style="color:#89DDFF;">]:</span></span>
<span class="line"><span style="color:#A6ACCD;">    var data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Pointer</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    var size</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span></span>
<span class="line"><span style="color:#A6ACCD;">    var cap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Int</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">inout </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pointer</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">alloc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__init__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">inout </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> size</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Type</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> size </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> size</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pointer</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">alloc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">store</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__copyinit__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">inout </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> other</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> other</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">size</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> other</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">size</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pointer</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">Type</span><span style="color:#89DDFF;">].</span><span style="color:#82AAFF;">alloc</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">cap</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;font-style:italic;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">range</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">size</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">            self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">store</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> other</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__getitem__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> -&gt; Type</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__setitem__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> i</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Int</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> value</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> Type</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">store</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">i</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> value</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">    fn </span><span style="color:#82AAFF;">__del__</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">owned </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">        self</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">free</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">var v </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Array</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">F32</span><span style="color:#89DDFF;">](</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">3.14</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">v</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> v</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> v</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">],</span><span style="color:#82AAFF;"> v</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">])</span></span></code></pre></div><p>更多内容逐步翻译中，欢迎入群加入翻译工作。 如果迫切需要更多资料请查看<a href="https://docs.modular.com/mojo/notebooks/HelloMojo.html#let-and-var-declarations" target="_blank" rel="noreferrer">英文原版文档</a>。</p>`,29),e=[o];function t(c,F,D,r,y,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
